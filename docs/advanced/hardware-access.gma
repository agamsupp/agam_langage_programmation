BASE DOCUMENTATION_ACCES_MATERIEL

RAPPORT "# Guide d'accès matériel pour AGAM"
RAPPORT ""
RAPPORT "Ce document explique comment utiliser les fonctionnalités de bas niveau d'AGAM pour accéder directement au matériel informatique, une capacité essentielle pour le développement de systèmes d'exploitation."
RAPPORT ""

RAPPORT "## Introduction"
RAPPORT ""
RAPPORT "AGAM permet l'accès direct au matériel informatique à travers plusieurs mécanismes :"
RAPPORT ""
RAPPORT "1. Accès aux ports d'entrée/sortie"
RAPPORT "2. Manipulation directe des registres du processeur"
RAPPORT "3. Configuration des interruptions matérielles"
RAPPORT "4. Contrôle de la pagination et des espaces d'adressage"
RAPPORT "5. Code assembleur inline pour les opérations spécifiques à l'architecture"
RAPPORT ""

RAPPORT "## 1. Accès aux ports d'entrée/sortie"
RAPPORT ""
RAPPORT "Les ports d'entrée/sortie permettent de communiquer avec les périphériques matériels. AGAM fournit des missions dédiées pour lire et écrire sur ces ports :"
RAPPORT ""
RAPPORT "```gma"
RAPPORT "// Lecture d'un octet depuis un port"
RAPPORT "MUNITION valeur = EXECUTION PORT_LIRE_OCTET 0x3F8  // Port COM1"
RAPPORT ""
RAPPORT "// Écriture d'un octet sur un port"
RAPPORT "EXECUTION PORT_ECRIRE_OCTET 0x3F8, 'A'  // Envoie le caractère 'A' sur COM1"
RAPPORT ""
RAPPORT "// Lecture/écriture de mots (16 bits) et de double-mots (32 bits)"
RAPPORT "MUNITION valeur_16 = EXECUTION PORT_LIRE_MOT 0x3D4"
RAPPORT "EXECUTION PORT_ECRIRE_MOT 0x3D4, 0x1234"
RAPPORT "```"
RAPPORT ""

RAPPORT "## 2. Manipulation des registres du processeur"
RAPPORT ""
RAPPORT "Le contrôle direct des registres est essentiel pour la configuration du système :"
RAPPORT ""
RAPPORT "```gma"
RAPPORT "// Lecture/écriture des registres de contrôle"
RAPPORT "MUNITION cr0 = EXECUTION REGISTRE_LIRE_CR0"
RAPPORT ""
RAPPORT "// Activer la pagination en modifiant CR0"
RAPPORT "EXECUTION REGISTRE_ECRIRE_CR0 cr0 | 0x80000000"
RAPPORT ""
RAPPORT "// Définir une nouvelle table de pages en modifiant CR3"
RAPPORT "EXECUTION REGISTRE_ECRIRE_CR3 adresse_table_pages"
RAPPORT "```"
RAPPORT ""

RAPPORT "## 3. Gestion des interruptions"
RAPPORT ""
RAPPORT "Les interruptions permettent au matériel de signaler des événements au processeur :"
RAPPORT ""
RAPPORT "```gma"
RAPPORT "// Désactiver les interruptions"
RAPPORT "EXECUTION INTERRUPTIONS_DESACTIVER"
RAPPORT ""
RAPPORT "// Réactiver les interruptions"
RAPPORT "EXECUTION INTERRUPTIONS_ACTIVER"
RAPPORT ""
RAPPORT "// Vérifier si les interruptions sont activées"
RAPPORT "SI CIBLE EXECUTION INTERRUPTIONS_ETAT"
RAPPORT "    RAPPORT \"Les interruptions sont activées\""
RAPPORT "FIN SI"
RAPPORT "```"
RAPPORT ""

RAPPORT "## 4. Assembleur inline"
RAPPORT ""
RAPPORT "Pour les opérations qui ne peuvent pas être exprimées directement en AGAM, vous pouvez utiliser l'assembleur inline :"
RAPPORT ""
RAPPORT "```gma"
RAPPORT "MISSION EXAMPLE_ASM"
RAPPORT "    ORDRE DE BATAILLE"
RAPPORT "        ASM {"
RAPPORT "            cli                  // Désactiver les interruptions"
RAPPORT "            mov eax, cr0          // Lire CR0"
RAPPORT "            or eax, 0x80000000    // Activer le bit de pagination"
RAPPORT "            mov cr0, eax          // Écrire CR0"
RAPPORT "            sti                  // Réactiver les interruptions"
RAPPORT "        }"
RAPPORT "        "
RAPPORT "        RETRAITE"
RAPPORT "    FIN ORDRE"
RAPPORT "FIN MISSION"
RAPPORT "```"
RAPPORT ""
RAPPORT "L'assembleur inline vous permet d'accéder aux instructions spécifiques à l'architecture qui ne sont pas directement exposées dans AGAM. Vous pouvez également accéder aux variables AGAM à partir du code assembleur en utilisant la syntaxe `[nom_variable]`."
RAPPORT ""

RAPPORT "## 5. Contrôle du cache et du TLB"
RAPPORT ""
RAPPORT "Pour les opérations avancées impliquant la mémoire et le cache :"
RAPPORT ""
RAPPORT "```gma"
RAPPORT "// Invalider le cache d'écriture"
RAPPORT "EXECUTION CACHE_INVALIDER"
RAPPORT ""
RAPPORT "// Invalider une entrée TLB pour une adresse spécifique"
RAPPORT "EXECUTION TLB_INVALIDER_ADRESSE adresse_virtuelle"
RAPPORT "```"
RAPPORT ""

RAPPORT "## 6. Attente et synchronisation"
RAPPORT ""
RAPPORT "Pour les opérations qui nécessitent d'attendre une réponse du matériel :"
RAPPORT ""
RAPPORT "```gma"
RAPPORT "// Attendre que le port 0x64 (contrôleur clavier) ait son bit 1 à 0"
RAPPORT "EXECUTION ATTENDRE_PORT 0x64, 0x02, 0x00"
RAPPORT ""
RAPPORT "// Arrêter le processeur jusqu'à la prochaine interruption"
RAPPORT "EXECUTION CPU_HALT"
RAPPORT "```"
RAPPORT ""

RAPPORT "## Bonnes pratiques"
RAPPORT ""
RAPPORT "1. **Privilèges** : L'accès matériel nécessite généralement des privilèges élevés. Dans un système d'exploitation, confinez ce code dans les parties noyau."
RAPPORT ""
RAPPORT "2. **Protection** : Utilisez toujours des mécanismes de protection pour éviter les conflits entre processus."
RAPPORT ""
RAPPORT "3. **Portabilité** : Le code d'accès matériel est spécifique à l'architecture. Isolez-le dans des modules distincts pour faciliter la portabilité."
RAPPORT ""
RAPPORT "4. **Documentation** : Documentez soigneusement tous les accès matériels, car ils peuvent avoir des effets secondaires non évidents."
RAPPORT ""
RAPPORT "5. **Tests** : Testez le code d'accès matériel dans un environnement contrôlé comme un émulateur avant de l'exécuter sur du matériel réel."
RAPPORT ""

RAPPORT "## Exemple complet : contrôleur d'interruption programmable (PIC 8259A)"
RAPPORT ""
RAPPORT "Voici un exemple complet de configuration du PIC dans un système x86 :"
RAPPORT ""
RAPPORT "```gma"
RAPPORT "BASE PIC_CONTROLEUR"
RAPPORT ""
RAPPORT "    MUNITION PIC1_COMMANDE = 0x20"
RAPPORT "    MUNITION PIC1_DONNEES = 0x21"
RAPPORT "    MUNITION PIC2_COMMANDE = 0xA0"
RAPPORT "    MUNITION PIC2_DONNEES = 0xA1"
RAPPORT ""
RAPPORT "    MISSION PIC_INITIALISER"
RAPPORT "        ORDRE DE BATAILLE"
RAPPORT "            // Sauvegarder les masques"
RAPPORT "            MUNITION masque1 = EXECUTION PORT_LIRE_OCTET PIC1_DONNEES"
RAPPORT "            MUNITION masque2 = EXECUTION PORT_LIRE_OCTET PIC2_DONNEES"
RAPPORT ""
RAPPORT "            // ICW1: initialisation"
RAPPORT "            EXECUTION PORT_ECRIRE_OCTET PIC1_COMMANDE, 0x11"
RAPPORT "            EXECUTION PORT_ECRIRE_OCTET PIC2_COMMANDE, 0x11"
RAPPORT ""
RAPPORT "            // ICW2: vecteurs de base"
RAPPORT "            EXECUTION PORT_ECRIRE_OCTET PIC1_DONNEES, 0x20" 
RAPPORT "            EXECUTION PORT_ECRIRE_OCTET PIC2_DONNEES, 0x28"
RAPPORT ""
RAPPORT "            // ICW3: configuration en cascade"
RAPPORT "            EXECUTION PORT_ECRIRE_OCTET PIC1_DONNEES, 0x04"
RAPPORT "            EXECUTION PORT_ECRIRE_OCTET PIC2_DONNEES, 0x02"
RAPPORT ""
RAPPORT "            // ICW4: mode 8086"
RAPPORT "            EXECUTION PORT_ECRIRE_OCTET PIC1_DONNEES, 0x01"
RAPPORT "            EXECUTION PORT_ECRIRE_OCTET PIC2_DONNEES, 0x01"
RAPPORT ""
RAPPORT "            // Restaurer les masques"
RAPPORT "            EXECUTION PORT_ECRIRE_OCTET PIC1_DONNEES, masque1"
RAPPORT "            EXECUTION PORT_ECRIRE_OCTET PIC2_DONNEES, masque2"
RAPPORT ""
RAPPORT "            RETRAITE"
RAPPORT "        FIN ORDRE"
RAPPORT "    FIN MISSION"
RAPPORT ""
RAPPORT "FIN BASE"
RAPPORT "```"
RAPPORT ""

RAPPORT "## Conclusion"
RAPPORT ""
RAPPORT "L'accès matériel en AGAM vous donne le contrôle nécessaire pour développer des composants système de bas niveau comme des pilotes de périphériques, des systèmes d'exploitation ou des environnements d'exécution spécialisés."
RAPPORT ""
RAPPORT "Les capacités d'accès matériel d'AGAM sont conçues pour offrir un équilibre entre la puissance d'un contrôle direct et les avantages d'un langage de plus haut niveau structuré avec sa terminologie militaire distinctive."

FIN BASE